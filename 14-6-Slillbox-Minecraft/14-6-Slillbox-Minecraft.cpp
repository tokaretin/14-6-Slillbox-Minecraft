/*Задание 7. Почти «Майнкрафт» (дополнительное задание)
Нам предстоит сделать некое подобие «Майнкрафта». Миллионов не обещаю, но это интересная задача на 
пространственное мышление. У нас есть небольшой квадратный ландшафт, размером 5 × 5 секторов. В 
каждом секторе располагается блок (столбик) ландшафта, максимальная высота которого — 10 блоков. 
Текущая высота каждого такого блока задаётся пользователем в начале программы. Итоговая задача: 
используя трёхмерный массив, вывести в стандартный вывод горизонтальное сечение (или горизонтальный срез) 
нашего небольшого мира. Сам мир как раз должен быть представлен в виде трёхмерного массива. 
Его горизонтальный срез — это двумерный массив, который надо отобразить в виде единиц и нулей. 
0 — это отсутствие элемента на данном уровне в данной точке, 1 — элемент есть. 
Уровень среза от 0 до 9 включительно также задаётся в стандартном вводе.

Пример выполнения
input matrix of heights:
  5 5 5 5
  4 4 4 4
  3 2 2 3
  1 1 1 1
input slice: 4
  1 1 1 1
  1 1 1 1
  0 0 0 0
  0 0 0 0
input slice: 3
  1 1 1 1
  1 1 1 1
  1 0 0 1
  0 0 0 0

Что оценивается
Использован трёхмерный массив.
Пользователь задаёт срез ландшафта, который хочет увидеть (от 0 до 9).
Выводится срез размером 5 × 5, состоящий из 0 и 1.
Советы и рекомендации
При печати потребуется проверять содержимое трёхмерного массива. При уже известном значении уровня level проверка выглядит так:

if (world[i][j][level]) 
{ 
//печатаем 1 
} 
else 
{ 
//печатаем 0 
}*/
#include <iostream>

const int WORLD_SIZE = 5;
const int MAX_HEIGHT = 10;

void printSlice(int world[WORLD_SIZE][WORLD_SIZE][MAX_HEIGHT + 1], int level)
{
    std::cout << "input slice: " << level << '\n';

    for (int i = 0; i < WORLD_SIZE; i++)
    {
        for (int j = 0; j < WORLD_SIZE; j++)
        {
            std::cout << (world[i][j][level] ? " 1" : " 0");
        }
        std::cout << '\n';
    }
}

int main()
{
    int world[WORLD_SIZE][WORLD_SIZE][MAX_HEIGHT + 1];

    std::cout << "Input matrix of heights:\n";

    for (int i = 0; i < WORLD_SIZE; i++)
    {
        for (int j = 0; j < WORLD_SIZE; j++)
        {
            std::cin >> world[i][j][0];
        }
    }

    // Генерируем остальные уровни на основе высот
    for (int i = 0; i < WORLD_SIZE; i++)
    {
        for (int j = 0; j < WORLD_SIZE; j++)
        {
            for (int h = 0; h <= MAX_HEIGHT; h++)
            {
                world[i][j][h] = (h <= world[i][j][h]) ? 1 : 0;
            }
        }
    }

    int sliceLevel;

    while (true) 
    {
        std::cout << "Input slice: ";
        std::cin >> sliceLevel;

        if (sliceLevel >= 0 && sliceLevel <= MAX_HEIGHT)
            printSlice(world, sliceLevel);
        else
            break;
    }
    
    return 0;
}
